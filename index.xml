<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Marco Ribeiro</title><link>https://marcoribeiro.ml/</link><description>Recent content on Marco Ribeiro</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 12 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://marcoribeiro.ml/index.xml" rel="self" type="application/rss+xml"/><item><title>Extração de Dados do Amazon DynamoDB para Postgres/MySQL</title><link>https://marcoribeiro.ml/posts/extracao-dados-dynamodb-postgres-mysql/</link><pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate><guid>https://marcoribeiro.ml/posts/extracao-dados-dynamodb-postgres-mysql/</guid><description>Um tempo atrás criei uma aplicação web para gerenciamento de contas a pagar e a receber utilizando a infraestrutura da AWS e o Amplify. Ao se criar uma API GraphQL utilizando o Amplify CLI, toda a infraestrutura necessária é criada, incluindo funções Lambda e a base de dados DynamoDB.</description></item><item><title>Bash Script Snippets</title><link>https://marcoribeiro.ml/snippets/bash-script-snippets/</link><pubDate>Thu, 06 Oct 2022 00:00:00 +0000</pubDate><guid>https://marcoribeiro.ml/snippets/bash-script-snippets/</guid><description>Cut string # my_filename=&amp;#34;interesting-text-file.txt&amp;#34; echo ${my_filename:0:21} echo ${my_filename%.*} complicated_filename=&amp;#34;hello-world.tar.gz&amp;#34; echo ${complicated_filename%%.*} echo ${my_filename/.*/} sed &amp;#39;s/[.].*//&amp;#39; &amp;lt;&amp;lt;&amp;lt; &amp;#39;hello-world.tar.gz&amp;#39; cut -f1 -d&amp;#34;.&amp;#34; &amp;lt;&amp;lt;&amp;lt; &amp;#39;hello-world.tar.gz&amp;#39; ~/execute_string.sh # your_command_string=&amp;#34;...&amp;#34; output=$(eval &amp;#34;$your_command_string&amp;#34;) echo &amp;#34;$output&amp;#34; ~/random.sh # echo $(( $RANDOM % 50 + 1 )) numero=${RANDOM:0:2} ~/return_values.</description></item><item><title>Refatoração Azure Data Factory com Bash Script</title><link>https://marcoribeiro.ml/posts/refatoracao-data-factory-bash/</link><pubDate>Thu, 06 Oct 2022 00:00:00 +0000</pubDate><guid>https://marcoribeiro.ml/posts/refatoracao-data-factory-bash/</guid><description>Nem tudo na vida de um engenheiro de dados são flores. As vezes é necessário fazer a &amp;ldquo;difícil&amp;rdquo; escolha entre usar força bruta ou passar horas alterando manualmente pipelines de dados em interfaces ‘clica e arrasta’.</description></item><item><title>Best command line tools</title><link>https://marcoribeiro.ml/posts/awesome-command-line-tools/</link><pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate><guid>https://marcoribeiro.ml/posts/awesome-command-line-tools/</guid><description>broot # br -dp # replace &amp;#39;ls&amp;#39;, display dates and permissions br -s # to identify what is taking disk space :gf # display git statuses fasd # alias a=&amp;#39;fasd -a&amp;#39; # any alias s=&amp;#39;fasd -si&amp;#39; # show / search / select alias d=&amp;#39;fasd -d&amp;#39; # directory alias f=&amp;#39;fasd -f&amp;#39; # file alias sd=&amp;#39;fasd -sid&amp;#39; # interactive directory selection alias sf=&amp;#39;fasd -sif&amp;#39; # interactive file selection alias z=&amp;#39;fasd_cd -d&amp;#39; # cd, same functionality as j in autojump alias zz=&amp;#39;fasd_cd -d -i&amp;#39; # cd with interactive selection alias v=&amp;#39;f -e vim&amp;#39; # quick opening files with vim fd # # Convert all jpg files to png files: fd -e jpg -x convert {} {.</description></item><item><title>Vim Personal Minimal Setup</title><link>https://marcoribeiro.ml/posts/vim-minimal-setup/</link><pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate><guid>https://marcoribeiro.ml/posts/vim-minimal-setup/</guid><description>Use Vim without your own .vimrc is not an easy task. Trainning to a certification test I was forced to use an virtual machine without my customizations. So, I had to find an minimal setup that would make the default Vim usable for me.</description></item><item><title>Como Substituir a Última Camada de Rede Neural no PyTorch</title><link>https://marcoribeiro.ml/posts/substituir-ultima-camada-rede-neural-pytorch/</link><pubDate>Tue, 14 Jan 2020 00:00:00 +0000</pubDate><guid>https://marcoribeiro.ml/posts/substituir-ultima-camada-rede-neural-pytorch/</guid><description>Durante o desenvolvimento de uma aplicação utilizando machine learning para, por exemplo, classificar imagens, não é necessário que se desenvolva uma Convolutional Neural Network do zero. Isso na verdade seria uma enorme perda de tempo e recursos computacionais, além de exigir do desenvolvedor expertise em tópicos como a inicialização dos pesos na rede neural.</description></item><item><title>Emacs Key Bindings</title><link>https://marcoribeiro.ml/posts/emacs-key-bindings/</link><pubDate>Fri, 10 Jan 2020 00:00:00 +0000</pubDate><guid>https://marcoribeiro.ml/posts/emacs-key-bindings/</guid><description>Emacs Key Biddings # C-x reserved for Emacs native essential keybindings: buffer, window, frame, file, directory, etc…
C-c reserved for user and major mode:
C-c letter reserved for user. &amp;lt;F5&amp;gt;-&amp;lt;F9&amp;gt; reserved for user.</description></item><item><title>Vim Key Bindings</title><link>https://marcoribeiro.ml/posts/vim-key-bindings/</link><pubDate>Fri, 10 Jan 2020 00:00:00 +0000</pubDate><guid>https://marcoribeiro.ml/posts/vim-key-bindings/</guid><description>Vim Command Language and examples of how to get things done.
Verbs # v : visual c : change d : delete y : yank/copy Modifiers # i : inside a : around t : till.</description></item><item><title>About</title><link>https://marcoribeiro.ml/about/</link><pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate><guid>https://marcoribeiro.ml/about/</guid><description>Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content.</description></item><item><title>Criando Um Gerador de Imagens de Placas de Carros</title><link>https://marcoribeiro.ml/posts/gerador-imagens-placas-carros/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marcoribeiro.ml/posts/gerador-imagens-placas-carros/</guid><description>Para treinar um modelo de machine learning que realize o reconhecimento de caracteres, OCR, é necessário uma grande quantidade de imagens de placas. Daria um trabalho enorme conseguir milhares de imagens de carros com as placas visíveis, recortar as placas das imagens e anotar as imagens com os textos dos números das placas.</description></item></channel></rss>